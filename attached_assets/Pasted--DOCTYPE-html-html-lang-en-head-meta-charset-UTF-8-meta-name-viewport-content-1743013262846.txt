<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trade Runner - Powered by LIV8</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: #0a0a0a;
            font-family: 'Arial', sans-serif;
            color: #00ffff;
        }
        #gameCanvas {
            background: linear-gradient(to bottom, #000435 0%, #000 100%);
            border: 2px solid #00ffff;
            display: block;
            margin: 0 auto;
        }
        #welcomeScreen, #gameOverScreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0, 0, 20, 0.95);
            padding: 20px;
            border: 2px solid #ff00ff;
            border-radius: 10px;
            width: 80%;
            max-width: 500px;
            box-shadow: 0 0 20px rgba(255, 0, 255, 0.3);
        }
        button {
            background: linear-gradient(45deg, #ff00ff, #9900ff);
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 18px;
            cursor: pointer;
            margin-top: 20px;
            border-radius: 5px;
            transition: transform 0.2s;
        }
        button:hover {
            transform: scale(1.05);
        }
        #leaderboard {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 20, 0.8);
            padding: 15px;
            border: 1px solid #00ffff;
            border-radius: 8px;
        }
        #brandingLiv8 {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            color: #ff00ff;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="welcomeScreen">
        <h1>Trade Runner</h1>
        <p>Navigate the markets, avoid order blocks, collect profits!</p>
        <p>Instructions:</p>
        <ul style="text-align: left;">
            <li>SPACEBAR or TAP to jump</li>
            <li>Hold longer to jump higher</li>
            <li>Avoid red order blocks</li>
            <li>Collect golden profits</li>
            <li>Trade your way to the top!</li>
        </ul>
        <select id="difficultySelect">
            <option value="easy">New Runner</option>
            <option value="medium">Advanced Runner</option>
            <option value="hard">Expert Runner</option>
        </select>
        <button id="startButton">Start Running</button>
    </div>
    <div id="gameOverScreen" style="display: none;">
        <h2>Running Session Over!</h2>
        <p>Total Profits: <span id="finalScore"></span></p>
        <input type="text" id="playerName" placeholder="Enter trader name">
        <button id="submitScore">Submit Score</button>
        <button id="restartButton">New Running Session</button>
    </div>
    <div id="leaderboard">
        <h3>Top Runners</h3>
        <ol id="leaderboardList"></ol>
    </div>
    <div id="brandingLiv8">Powered by LIV8</div>

    <script>
const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        let gameActive = false;
        let player, obstacles, coins, gameSpeed, score;
        let leaderboard = [];
        let isJumping = false;
        let jumpStartTime = 0;
        let animationFrame = 0;
        const MAX_JUMP_DURATION = 500;

        function resizeCanvas() {
            canvas.width = Math.min(window.innerWidth, 1200);
            canvas.height = Math.min(window.innerHeight, 800);
        }

window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Character animation frames
        class Character {
            constructor(x, y, width, height) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.frame = 0;
                this.frameCount = 0;
            }

            draw(ctx) {
                ctx.fillStyle = '#00ff88';
                // Body
                ctx.fillRect(this.x, this.y, this.width, this.height);
               
                // Running animation
                this.frameCount++;
                if (this.frameCount > 5) {
                    this.frame = (this.frame + 1) % 4;
                    this.frameCount = 0;
                }

                // Legs animation
                const legOffset = [0, 5, 0, -5][this.frame];
                ctx.fillRect(this.x + 5, this.y + this.height, 10, 10 + legOffset);
                ctx.fillRect(this.x + this.width - 15, this.y + this.height, 10, 10 - legOffset);
            }
        }

        function initGame() {
            const difficulty = difficultySelect.value;
            player = new Character(50, canvas.height - 150, 40, 40);
            obstacles = [];
            coins = [];
            score = 0;

            switch(difficulty) {
                case 'easy': gameSpeed = 5; break;
                case 'medium': gameSpeed = 7; break;
                case 'hard': gameSpeed = 9; break;
            }
        }

        function startGame() {
            welcomeScreen.style.display = 'none';
            gameOverScreen.style.display = 'none';
            gameActive = true;
            initGame();
            gameLoop();
        }

document.getElementById('startButton').addEventListener('click', startGame);
document.getElementById('restartButton').addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            welcomeScreen.style.display = 'block';
        });

        function handleJumpStart(event) {
            if ((event.type === 'keydown' && event.code === 'Space') || event.type === 'touchstart') {
                event.preventDefault();
                if (player.grounded && gameActive) {
                    isJumping = true;
                    jumpStartTime = Date.now();
                }
            }
        }

        function handleJumpEnd(event) {
            if ((event.type === 'keyup' && event.code === 'Space') || event.type === 'touchend') {
                event.preventDefault();
                isJumping = false;
            }
        }

document.addEventListener('keydown', handleJumpStart);
document.addEventListener('keyup', handleJumpEnd);
canvas.addEventListener('touchstart', handleJumpStart);
canvas.addEventListener('touchend', handleJumpEnd);

        function update() {
            if (isJumping) {
                const jumpDuration = Date.now() - jumpStartTime;
                const jumpForce = Math.min(jumpDuration / MAX_JUMP_DURATION, 1) * -15;
                player.dy = jumpForce;
            }

            // Apply gravity
            player.dy = player.dy || 0;
            player.dy += 0.6;
            player.y += player.dy;
            player.grounded = false;

            // Ground collision
            if (player.y + player.height > canvas.height - 50) {
                player.y = canvas.height - player.height - 50;
                player.dy = 0;
                player.grounded = true;
            }

            // Update obstacles
            obstacles.forEach((obstacle, index) => {
                obstacle.x -= gameSpeed;
                if (obstacle.x + obstacle.width < 0) {
                    obstacles.splice(index, 1);
                }
                if (collision(player, obstacle)) {
                    gameOver();
                }
            });

            // Update coins
            coins.forEach((coin, index) => {
                coin.x -= gameSpeed;
                if (coin.x + coin.width < 0) {
                    coins.splice(index, 1);
                }
                if (collision(player, coin)) {
                    score += 10;
                    coins.splice(index, 1);
                }
            });

            // Spawn obstacles
            if (Math.random() < 0.02) {
                const isTop = Math.random() < 0.5;
                obstacles.push({
                    x: canvas.width,
                    y: isTop ? 0 : canvas.height - 100,
                    width: 40,
                    height: Math.random() * 30 + 30,
                    isTop
                });
            }

            // Spawn coins
            if (Math.random() < 0.03) {
                coins.push({
                    x: canvas.width,
                    y: Math.random() * (canvas.height - 200) + 50,
                    width: 20,
                    height: 20
                });
            }

            gameSpeed += 0.001;
        }

        function draw() {
            // Clear canvas
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw grid background
            ctx.strokeStyle = '#113355';
            ctx.lineWidth = 1;
            const gridSize = 50;
            for (let x = 0; x < canvas.width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            for (let y = 0; y < canvas.height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }

            // Draw player
            player.draw(ctx);

            // Draw obstacles (order blocks)
            ctx.fillStyle = '#ff0033';
            obstacles.forEach(obstacle => {
                ctx.fillStyle = obstacle.isTop ? '#ff3300' : '#ff0033';
                ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
               
                // Add gradient effect
                const gradient = ctx.createLinearGradient(
                    obstacle.x, obstacle.y,
                    obstacle.x + obstacle.width, obstacle.y + obstacle.height
                );
                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.2)');
                gradient.addColorStop(1, 'rgba(0, 0, 0, 0.2)');
                ctx.fillStyle = gradient;
                ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
            });

            // Draw coins (profits)
            ctx.fillStyle = '#ffd700';
            coins.forEach(coin => {
                ctx.beginPath();
                ctx.arc(coin.x + coin.width/2, coin.y + coin.height/2, coin.width/2, 0, Math.PI * 2);
                ctx.fill();
               
                // Add shine effect
                ctx.fillStyle = '#ffffff';
                ctx.beginPath();
                ctx.arc(coin.x + coin.width/3, coin.y + coin.height/3, coin.width/6, 0, Math.PI * 2);
                ctx.fill();
            });

            // Draw ground
            const groundGradient = ctx.createLinearGradient(0, canvas.height - 50, 0, canvas.height);
groundGradient.addColorStop(0, '#113355');
groundGradient.addColorStop(1, '#001133');
            ctx.fillStyle = groundGradient;
            ctx.fillRect(0, canvas.height - 50, canvas.width, 50);

            // Draw score
            ctx.fillStyle = '#00ffff';
            ctx.font = 'bold 24px Arial';
            ctx.fillText('Profits: ' + score, 20, 40);
        }

        function gameLoop() {
            if (gameActive) {
                update();
                draw();
requestAnimationFrame(gameLoop);
            }
        }

        function collision(a, b) {
            return a.x < b.x + b.width &&
                   a.x + a.width > b.x &&
                   a.y < b.y + b.height &&
                   a.y + a.height > b.y;
        }

        function gameOver() {
            gameActive = false;
            gameOverScreen.style.display = 'block';
document.getElementById('finalScore').textContent = score;
        }

document.getElementById('submitScore').addEventListener('click', function() {
const playerName = document.getElementById('playerName').value || 'Anonymous';
            leaderboard.push({name: playerName, score: score});
            leaderboard.sort((a, b) => b.score - a.score);
            leaderboard = leaderboard.slice(0, 5);
            updateLeaderboard();
            gameOverScreen.style.display = 'none';
            welcomeScreen.style.display = 'block';
        });

        function updateLeaderboard() {
const list = document.getElementById('leaderboardList');
            list.innerHTML = '';
            leaderboard.forEach(entry => {
                const li = document.createElement('li');
                li.textContent = `${entry.name}: ${entry.score}`;
                list.appendChild(li);
            });
        }

        welcomeScreen.style.display = 'block';
    </script>
</body>
</html>