<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solana Validator Dashboard</title>
    <!-- Tailwind CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <!-- React and ReactDOM -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <!-- Babel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.21.2/babel.min.js"></script>
    <!-- Import Solana Web3.js via ES modules - more reliable approach -->
    <script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <div id="app" class="container mx-auto py-8 px-4"></div>

    <script type="text/babel">
        // Main App Component
        const App = () => {
            // Access the solana library from the global variable
            const solanaWeb3 = window.solanaWeb3;
            
            const [connected, setConnected] = React.useState(false);
            const [publicKey, setPublicKey] = React.useState(null);
            const [validatorInfo, setValidatorInfo] = React.useState(null);
            const [loading, setLoading] = React.useState(false);
            const [error, setError] = React.useState(null);
            const [rpcEndpoint, setRpcEndpoint] = React.useState("https://api.mainnet-beta.solana.com");
            const [validatorPubkey, setValidatorPubkey] = React.useState("2wbzum5jnZscYNqBwTUPmk7X6RngRnJajY8KMpocJTNQ");
            const [voteAccount, setVoteAccount] = React.useState("");
            
            // Check if solanaWeb3 is available
            React.useEffect(() => {
                if (!window.solanaWeb3) {
                    setError("Solana Web3 library not loaded. Please try refreshing the page.");
                }
            }, []);
            
            const connection = React.useMemo(() => {
                if (!solanaWeb3) {
                    return null;
                }
                try {
                    return new solanaWeb3.Connection(rpcEndpoint);
                } catch (err) {
                    setError("Failed to connect to Solana network: " + err.message);
                    return null;
                }
            }, [rpcEndpoint, solanaWeb3]);

            // Connect wallet handler
            const connectWallet = React.useCallback(async () => {
                if (!solanaWeb3) {
                    setError("Solana Web3 library not loaded");
                    return;
                }
                
                if (window.solana) {
                    try {
                        setLoading(true);
                        const response = await window.solana.connect();
                        setPublicKey(response.publicKey.toString());
                        setConnected(true);
                        setLoading(false);
                    } catch (error) {
                        console.error(error);
                        setError("Failed to connect wallet: " + error.message);
                        setLoading(false);
                    }
                } else {
                    setError("Solana wallet not found! Please install Phantom or another Solana wallet extension");
                }
            }, [solanaWeb3]);

            // Disconnect wallet handler
            const disconnectWallet = React.useCallback(async () => {
                if (window.solana) {
                    await window.solana.disconnect();
                    setConnected(false);
                    setPublicKey(null);
                }
            }, []);

            // Fetch validator info
            const fetchValidatorInfo = React.useCallback(async () => {
                if (!solanaWeb3) {
                    setError("Solana Web3 library not loaded");
                    return;
                }
                
                if (!connection) {
                    setError("Connection to Solana network not established");
                    return;
                }
                
                try {
                    setLoading(true);
                    setError(null);
                    
                    // Convert string to PublicKey
                    const validatorKey = new solanaWeb3.PublicKey(validatorPubkey);
                    
                    // Get validator vote accounts
                    const voteAccounts = await connection.getVoteAccounts();
                    const myVoteAccount = voteAccounts.current.find(
                        account => account.nodePubkey === validatorPubkey
                    ) || voteAccounts.delinquent.find(
                        account => account.nodePubkey === validatorPubkey
                    );
                    
                    if (myVoteAccount) {
                        setVoteAccount(myVoteAccount.votePubkey);
                        
                        setValidatorInfo({
                            status: myVoteAccount.delinquent ? "Delinquent" : "Active",
                            commission: myVoteAccount.commission + "%",
                            rootSlot: myVoteAccount.rootSlot,
                            lastVote: myVoteAccount.lastVote,
                            activatedStake: (myVoteAccount.activatedStake / solanaWeb3.LAMPORTS_PER_SOL).toFixed(2) + " SOL",
                            epochVoteAccount: myVoteAccount.epochVoteAccount,
                            epochCredits: myVoteAccount.epochCredits.length > 0 ? 
                                myVoteAccount.epochCredits[myVoteAccount.epochCredits.length-1][1] : 0,
                            identity: validatorPubkey,
                            voteAccount: myVoteAccount.votePubkey,
                        });
                    } else {
                        setError("Validator not found in active or delinquent vote accounts");
                    }
                    
                    setLoading(false);
                } catch (error) {
                    console.error("Error fetching validator info:", error);
                    setError("Failed to fetch validator information: " + error.message);
                    setLoading(false);
                }
            }, [connection, validatorPubkey, solanaWeb3]);
            
            // Update commission (requires wallet signature)
            const updateCommission = async (newCommission) => {
                if (!solanaWeb3) {
                    setError("Solana Web3 library not loaded");
                    return;
                }
                
                if (!connected) {
                    setError("Please connect your wallet first");
                    return;
                }
                
                try {
                    setLoading(true);
                    // This would be the actual implementation for updating commission
                    alert(`Commission update functionality would be implemented here.\nThis would update the commission to ${newCommission}%`);
                    setLoading(false);
                } catch (error) {
                    console.error("Error updating commission:", error);
                    setError("Failed to update commission: " + error.message);
                    setLoading(false);
                }
            };

            // Effects
            React.useEffect(() => {
                // Auto-connect if wallet was previously connected
                const autoConnect = async () => {
                    if (window.solana && window.solana.isConnected) {
                        try {
                            const response = await window.solana.connect({ onlyIfTrusted: true });
                            setPublicKey(response.publicKey.toString());
                            setConnected(true);
                        } catch (error) {
                            // Silent error for auto-connect
                        }
                    }
                };
                
                autoConnect();
            }, []);

            return (
                <div className="max-w-4xl mx-auto">
                    <header className="bg-blue-600 text-white p-6 rounded-lg shadow-lg mb-6">
                        <h1 className="text-3xl font-bold">Solana Validator Dashboard</h1>
                        <p className="mt-2">Monitor and manage your Solana validator</p>
                    </header>
                    
                    {!solanaWeb3 && (
                        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                            <p className="font-bold">Error</p>
                            <p>Solana Web3 library not loaded. Please refresh the page or check your internet connection.</p>
                        </div>
                    )}
                    
                    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-xl font-semibold">Wallet Connection</h2>
                            {connected ? (
                                <button 
                                    onClick={disconnectWallet}
                                    className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md transition-colors"
                                >
                                    Disconnect Wallet
                                </button>
                            ) : (
                                <button 
                                    onClick={connectWallet}
                                    className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors"
                                    disabled={loading || !solanaWeb3}
                                >
                                    {loading ? "Connecting..." : "Connect Wallet"}
                                </button>
                            )}
                        </div>
                        
                        {connected && publicKey && (
                            <div className="p-4 bg-gray-100 rounded-md">
                                <p className="font-medium">Connected: <span className="font-mono text-sm">{publicKey}</span></p>
                            </div>
                        )}
                    </div>
                    
                    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                        <h2 className="text-xl font-semibold mb-4">Validator Configuration</h2>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-gray-700 mb-2" htmlFor="rpc-endpoint">
                                    RPC Endpoint
                                </label>
                                <input 
                                    id="rpc-endpoint"
                                    type="text" 
                                    className="w-full p-2 border border-gray-300 rounded-md"
                                    value={rpcEndpoint}
                                    onChange={(e) => setRpcEndpoint(e.target.value)}
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700 mb-2" htmlFor="validator-pubkey">
                                    Validator Identity Pubkey
                                </label>
                                <input 
                                    id="validator-pubkey"
                                    type="text" 
                                    className="w-full p-2 border border-gray-300 rounded-md"
                                    value={validatorPubkey}
                                    onChange={(e) => setValidatorPubkey(e.target.value)}
                                />
                            </div>
                        </div>
                        
                        <button 
                            onClick={fetchValidatorInfo}
                            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors"
                            disabled={loading || !solanaWeb3 || !connection}
                        >
                            {loading ? "Loading..." : "Fetch Validator Info"}
                        </button>
                    </div>
                    
                    {error && (
                        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                            <p>{error}</p>
                        </div>
                    )}
                    
                    {validatorInfo && (
                        <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                            <h2 className="text-xl font-semibold mb-4">Validator Information</h2>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Status</h3>
                                    <div className={`text-lg font-bold ${validatorInfo.status === 'Active' ? 'text-green-600' : 'text-red-600'}`}>
                                        {validatorInfo.status}
                                    </div>
                                </div>
                                
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Commission</h3>
                                    <div className="text-lg font-bold">{validatorInfo.commission}</div>
                                    {connected && (
                                        <div className="mt-2">
                                            <button 
                                                onClick={() => updateCommission(0.5)}
                                                className="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 text-sm rounded-md transition-colors"
                                            >
                                                Update to 0.5%
                                            </button>
                                        </div>
                                    )}
                                </div>
                                
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Activated Stake</h3>
                                    <div className="text-lg font-bold">{validatorInfo.activatedStake}</div>
                                </div>
                                
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Root Slot</h3>
                                    <div className="text-lg font-bold">{validatorInfo.rootSlot}</div>
                                </div>
                                
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Last Vote</h3>
                                    <div className="text-lg font-bold">{validatorInfo.lastVote}</div>
                                </div>
                                
                                <div className="bg-blue-50 p-4 rounded-md">
                                    <h3 className="font-medium text-blue-800 mb-2">Epoch Credits</h3>
                                    <div className="text-lg font-bold">{validatorInfo.epochCredits}</div>
                                </div>
                            </div>
                            
                            <div className="mt-6 p-4 bg-gray-100 rounded-md">
                                <h3 className="font-medium mb-2">Identity Pubkey</h3>
                                <div className="font-mono text-sm break-all">{validatorInfo.identity}</div>
                                
                                <h3 className="font-medium mt-4 mb-2">Vote Account</h3>
                                <div className="font-mono text-sm break-all">{validatorInfo.voteAccount}</div>
                            </div>
                        </div>
                    )}
                    
                    <footer className="text-center text-gray-500 text-sm mt-8">
                        <p>© 2025 Solana Validator Dashboard</p>
                    </footer>
                </div>
            );
        };

        // Render the App
        ReactDOM.render(<App />, document.getElementById('app'));
    </script>

    <script>
        // Check for wallet
        window.addEventListener('load', () => {
            // Check if Phantom wallet or other Solana wallets are available
            if (!window.solana) {
                // Create a notification if no wallet is found
                const notification = document.createElement('div');
                notification.style.position = 'fixed';
                notification.style.top = '20px';
                notification.style.left = '50%';
                notification.style.transform = 'translateX(-50%)';
                notification.style.backgroundColor = '#f87171';
                notification.style.color = 'white';
                notification.style.padding = '12px 24px';
                notification.style.borderRadius = '8px';
                notification.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
                notification.style.zIndex = '9999';
                notification.textContent = 'Solana wallet not detected. Please install Phantom or another Solana wallet extension.';
                
                document.body.appendChild(notification);
                
                // Remove after 5 seconds
                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transition = 'opacity 0.5s ease';
                    setTimeout(() => notification.remove(), 500);
                }, 5000);
            }
        });
    </script>
</body>
</html>