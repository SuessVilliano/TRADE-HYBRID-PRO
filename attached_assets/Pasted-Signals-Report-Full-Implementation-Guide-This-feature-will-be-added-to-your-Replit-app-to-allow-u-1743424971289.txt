Signals Report - Full Implementation Guide

This feature will be added to your Replit app to allow users to:
	1.	Store historical market data or upload their own.
	2.	Upload a Google Sheets file with trade signals (Entry, SL, TP).
	3.	Analyze trades to determine if they hit Stop Loss (SL) or Take Profit (TP) first.
	4.	Identify which TP levels were reached (if multiple TPs are set).
	5.	Export the results to a CSV file and update the original Google Sheet.

⸻

Step 1: Install Required Libraries

Replit requires Python packages for handling data and Google Sheets:

pip install pandas gspread oauth2client flask filetype



⸻

Step 2: Google Sheets API Setup
	1.	Go to Google Cloud Console.
	2.	Enable the Google Sheets API.
	3.	Create a Service Account → Download the JSON key file.
	4.	Share your Google Sheet with the service account email.

⸻

Step 3: Upload & Process Historical Data

The system will allow users to:
	•	Store historical data in the app (for default use).
	•	Upload their own CSV file if they prefer.

⸻

Step 4: Full Python Code for the Signals Report

Save this as signals_report.py in your Replit project.

import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask, request, render_template
import os
import filetype

app = Flask(__name__)

# Google Sheets API Setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_api_credentials.json", scope)
client = gspread.authorize(creds)

# Store historical market data (default)
HISTORICAL_DATA_PATH = "historical_data.csv"

# Function to check trade outcomes
def check_trade_outcome(row, historical_data):
    entry_time = pd.to_datetime(row['Entry Time'])
    entry_price = row['Entry Price']
    stop_loss = row['Stop Loss']
    
    # Handle multiple TPs if provided
    take_profits = [row[col] for col in row.index if "Take Profit" in col and pd.notna(row[col])]

    # Get price movements after entry
    future_prices = historical_data.loc[entry_time:].copy()

    if future_prices.empty:
        return "No Data"

    for timestamp, data in future_prices.iterrows():
        price = data['Close']
        
        for i, tp in enumerate(take_profits):
            if price >= tp:
                return f"Take Profit {i+1} Hit"

        if price <= stop_loss:
            return "Stop Loss Hit"

    return "Trade Still Open"

# Route for uploading historical data
@app.route('/upload_historical', methods=['POST'])
def upload_historical():
    file = request.files['file']
    
    if file:
        file_path = os.path.join("uploads", file.filename)
        file.save(file_path)
        
        # Check if file is a CSV
        kind = filetype.guess(file_path)
        if kind is None or kind.extension != "csv":
            return "Invalid file format. Please upload a CSV."

        # Store as historical data
        os.rename(file_path, HISTORICAL_DATA_PATH)
        return "Historical data uploaded successfully."

    return "No file received."

# Route for processing trade signals
@app.route('/process_signals', methods=['POST'])
def process_signals():
    sheet_name = request.form['sheet_name']
    sheet = client.open(sheet_name).worksheet("Sheet1")
    
    # Load trade signals
    trade_signals = pd.DataFrame(sheet.get_all_records())
    trade_signals['Entry Time'] = pd.to_datetime(trade_signals['Entry Time'])

    # Load historical data
    historical_data = pd.read_csv(HISTORICAL_DATA_PATH)
    historical_data['Timestamp'] = pd.to_datetime(historical_data['Timestamp'])
    historical_data.set_index('Timestamp', inplace=True)

    # Apply trade analysis
    trade_signals['Outcome'] = trade_signals.apply(lambda row: check_trade_outcome(row, historical_data), axis=1)

    # Save results to CSV
    result_path = "trade_results.csv"
    trade_signals.to_csv(result_path, index=False)

    # Update Google Sheet with results
    sheet.update([trade_signals.columns.values.tolist()] + trade_signals.values.tolist())

    return f"Trade results saved to {result_path} and updated in Google Sheets."

# Route for the web interface
@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    os.makedirs("uploads", exist_ok=True)
    app.run(host='0.0.0.0', port=5000)



⸻

Step 5: Web Interface

Create templates/index.html

This will be your Replit app’s user interface.

<!DOCTYPE html>
<html>
<head>
    <title>Signals Report</title>
</head>
<body>
    <h1>Upload Historical Data</h1>
    <form action="/upload_historical" method="post" enctype="multipart/form-data">
        <input type="file" name="file" required>
        <button type="submit">Upload</button>
    </form>

    <h1>Process Trade Signals</h1>
    <form action="/process_signals" method="post">
        <label for="sheet_name">Google Sheet Name:</label>
        <input type="text" id="sheet_name" name="sheet_name" required>
        <button type="submit">Process Trades</button>
    </form>
</body>
</html>



⸻

Step 6: Running the App on Replit
	1.	Upload google_api_credentials.json to your Replit project.
	2.	Create a folder uploads/ (for user-uploaded historical data).
	3.	Run the app with:

python signals_report.py


	4.	Open the Replit-hosted web interface.

⸻

Step 7: How It Works
	1.	Upload Historical Data (CSV from NinjaTrader or other sources).
	2.	Enter Google Sheet Name (which contains trade signals).
	3.	Click Process Trades → The system will:
	•	Retrieve historical market data.
	•	Pull trade signals from Google Sheets.
	•	Compare entry prices with market data.
	•	Determine whether Stop Loss or Take Profit was hit first.
	•	Update the Google Sheet with results.
	•	Save results to a CSV file (trade_results.csv).

⸻

Bonus Features for Future Updates
	•	Allow Multiple Historical Data Uploads → Store them for different assets.
	•	Enable Real-Time Data Fetching → Connect to APIs like NinjaTrader’s live feed.
	•	Visual Reports → Generate trade analysis charts using matplotlib.
	•	Performance Metrics → Win rate, average profit/loss, max drawdown.

⸻

This setup turns your Replit app into a full-fledged trade signal backtesting system! Let me know if you need modifications or additional features.