<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trading Assistant</title>
    <style>
        :root {
            --primary-color: #b829e3;
            --secondary-color: #8e15b5;
            --background-color: #f8fafc;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        html, body {
            height: 100%;
            overflow: hidden;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            padding: 20px;
        }

        .container {
            height: 100%;
            max-width: 100%;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
        }

        .chat-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .screen-preview {
            width: 100%;
            flex: 1;
            background: #000;
            border-radius: 8px;
            margin-bottom: 20px;
            min-height: 0;
        }

        .messages {
            height: 200px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            flex-shrink: 0;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
        }

        .user-message {
            background: #e3f2fd;
            margin-left: 20px;
        }

        .assistant-message {
            background: #f3f4f6;
            margin-right: 20px;
        }

        .input-container {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .mic-button {
            background-color: var(--primary-color);
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .mic-button.active {
            background-color: #ff4444;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .mic-button svg {
            width: 24px;
            height: 24px;
            fill: white;
            color: white;
            stroke: white;
        }
        
        .export-button {
            margin-left: auto;
            background-color: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            padding: 8px 16px;
        }
        
        .export-button:hover {
            background-color: var(--primary-color);
            color: white;
        }

        input[type="text"] {
            flex: 1;
            padding: 12px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
        }

        button {
            padding: 12px 24px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.2s;
        }

        button:hover {
            background-color: var(--secondary-color);
        }

        button:disabled {
            background-color: #cbd5e1;
            cursor: not-allowed;
        }

        .control-panel {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        h1 {
            margin-bottom: 20px;
            flex-shrink: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-container">
            <h1>Trading Assistant</h1>
            
            <div class="control-panel">
                <button id="startScreen" onclick="startScreenShare()">Start Screen Share</button>
                <button id="stopScreen" onclick="stopScreenShare()" disabled>Stop Screen Share</button>
                <button class="export-button" onclick="exportConversation()">Export Chat</button>
            </div>

            <video id="screenPreview" class="screen-preview" autoplay playsinline muted></video>
            
            <div class="messages" id="messageContainer">
                <div class="message assistant-message">
                    Hello! I'm your trading assistant. Feel free to share your screen and ask questions about your trading charts.
                </div>
            </div>

            <div class="input-container">
                <button class="mic-button" id="micButton" onclick="toggleVoiceInput()">
                    <svg viewBox="0 0 24 24">
                        <path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z"/>
                        <path d="M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z"/>
                    </svg>
                </button>
                <input type="text" id="userInput" placeholder="Type your message here..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        let stream = null;
        let recognition = null;
        let isRecording = false;

        // Initialize speech recognition
        if ('webkitSpeechRecognition' in window) {
            recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;

            recognition.onresult = (event) => {
                const input = document.getElementById('userInput');
                input.value = '';
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    if (event.results[i].isFinal) {
                        input.value = event.results[i][0].transcript;
                    }
                }
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                stopVoiceInput();
            };
        }

        function toggleVoiceInput() {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }

            const micButton = document.getElementById('micButton');
            
            if (isRecording) {
                stopVoiceInput();
            } else {
                startVoiceInput();
            }
        }

        function startVoiceInput() {
            recognition.start();
            isRecording = true;
            document.getElementById('micButton').classList.add('active');
        }

        function stopVoiceInput() {
            if (recognition) {
                recognition.stop();
                isRecording = false;
                document.getElementById('micButton').classList.remove('active');
            }
        }

        async function startScreenShare() {
            try {
                stream = await navigator.mediaDevices.getDisplayMedia({
                    video: {
                        cursor: "always"
                    },
                    audio: false
                });
                
                const video = document.getElementById('screenPreview');
                video.srcObject = stream;
                
                document.getElementById('startScreen').disabled = true;
                document.getElementById('stopScreen').disabled = false;
                
                addMessage("Screen sharing started successfully.", "assistant");
                
                stream.getVideoTracks()[0].addEventListener('ended', () => {
                    stopScreenShare();
                });
            } catch (err) {
                console.error("Error: " + err);
                addMessage("Failed to start screen sharing: " + err.message, "assistant");
            }
        }

        function stopScreenShare() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
                
                const video = document.getElementById('screenPreview');
                video.srcObject = null;
                
                document.getElementById('startScreen').disabled = false;
                document.getElementById('stopScreen').disabled = true;
                
                addMessage("Screen sharing stopped.", "assistant");
            }
        }

        function addMessage(text, type) {
            const messagesContainer = document.getElementById('messageContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}-message`;
            messageDiv.textContent = text;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('userInput');
            const message = input.value.trim();
            
            if (message) {
                addMessage(message, "user");
                input.value = '';
                stopVoiceInput();

                try {
                    const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer YOUR_API_KEY_HERE' // Replace with your actual API key
                        },
                        body: JSON.stringify({
                            contents: [{
                                parts: [{
                                    text: message
                                }]
                            }],
                            generationConfig: {
                                temperature: 0.7,
                                topK: 40,
                                topP: 0.95,
                                maxOutputTokens: 1024,
                            }
                        })
                    });

                    const data = await response.json();
                    
                    if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
                        addMessage(data.candidates[0].content.parts[0].text, "assistant");
                    } else {
                        addMessage("I apologize, but I couldn't generate a response at this time.", "assistant");
                    }
                } catch (error) {
                    console.error('Error:', error);
                    addMessage("Sorry, there was an error processing your request.", "assistant");
                }
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function exportConversation() {
            const messages = document.getElementById('messageContainer');
            let conversationText = '';
            
            // Convert the messages to text format
            messages.childNodes.forEach(node => {
                if (node.textContent) {
                    const messageType = node.classList.contains('user-message') ? 'User' : 'Assistant';
                    conversationText += `${messageType}: ${node.textContent}nn`;
                }
            });
            
            // Create a blob and download link
            const blob = new Blob([conversationText], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `trading-conversation-${new Date().toISOString().slice(0,10)}.txt`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }

        // Adjust video height on window resize
        window.addEventListener('resize', () => {
            const container = document.querySelector('.chat-container');
            const video = document.getElementById('screenPreview');
            const remainingHeight = container.clientHeight - 
                document.querySelector('h1').offsetHeight -
                document.querySelector('.control-panel').offsetHeight -
                document.querySelector('.messages').offsetHeight -
                document.querySelector('.input-container').offsetHeight -
                80; // padding and margins
            video.style.height = `${remainingHeight}px`;
        });

        // Initial size adjustment
        window.dispatchEvent(new Event('resize'));
    </script>
</body>
</html>