


<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SMB Capital Calculators</title>
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&amp;display=swap" rel="stylesheet">
<style>
  /* Common Styles */
  body {
    font-family: 'Lato', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100vh;
  }

  :root {
    --bg-color: #121212;
    --text-color: white;
    --button-bg: #28a745;
    --button-hover: #218838;
  }

  .light-theme {
    --bg-color: #f0f0f0;
    --text-color: #121212;
    --button-bg: #007bff;
    --button-hover: #0056b3;
  }

  .container {
    width: 90%;
    max-width: 1200px;
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }

  .header {
    text-align: center;
    margin-bottom: 20px;
  }

  .logo {
    width: 200px;
  }

  .theme-toggle {
    position: absolute;
    top: 20px;
    right: 20px;
    cursor: pointer;
  }

  .menu {
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  .menu button {
    padding: 10px 20px;
    background-color: var(--button-bg);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .menu button:hover {
    background-color: var(--button-hover);
  }

  .calculator {
    display: none;
  }

  .active {
    display: block;
  }

  .input-group {
    margin: 10px 0;
    display: flex;
    flex-direction: column;
  }

  .input-group input, .input-group select {
    padding: 12px;
    margin-top: 5px;
    border: none;
    border-radius: 5px;
    background-color: #2a2a2a;
    color: white;
  }

  .input-group label {
    font-weight: bold;
  }

  .result, .error-message {
    margin-top: 10px;
    font-weight: bold;
    display: none;
  }

  .chart-container {
    position: relative;
    height: 400px;
    margin-top: 20px;
  }

  canvas {
    background-color: transparent;
  }

  .error-message {
    color: red;
  }

  .join-smb {
    margin-top: 20px;
    text-align: center;
    color: #28a745;
  }

  .join-smb:hover {
    color: #218838;
  }
</style>



<div class="header">
  <img src="https://storage.builderall.com//franquias/2/31030/editor-html/11854905.png" alt="Logo" style="width: 150px; height: auto;">
  <h1>Hybrid Calculators</h1>
  <div class="theme-toggle" onclick="toggleTheme()">
    <span id="theme-icon">🌙</span>
  </div>
</div>

<div class="menu">
  <button onclick="showCalculator('ev')">EV Calculator</button>
  <button onclick="showCalculator('compound')">Compound Trading</button>
  <button onclick="showCalculator('snowball')">Debt Snowball</button>
  <button onclick="showCalculator('avalanche')">Debt Avalanche</button>
</div>

<div class="container">
  <!-- Expected Value Calculator -->
  <div class="calculator active" id="ev">
    <h2>Expected Value (EV) Calculator</h2>
    <div class="input-group">
      <label for="probability1">Probability of Winning (%)</label>
      <input type="number" id="probability1" placeholder="Enter probability (ex. 60)">
    </div>
    <div class="input-group">
      <label for="value1">Reward</label>
      <input type="number" id="value1" placeholder="Enter reward (ex. 3)">
    </div>
    <div class="input-group">
      <label for="value2">Risk</label>
      <input type="number" id="value2" placeholder="Enter risk (ex. 1)">
    </div>
    <button onclick="calculateEV()">Calculate EV</button>
    <div class="result" id="result-ev"></div>
    <div class="chart-container">
      <canvas id="evChart"></canvas>
    </div>
  </div>

  <!-- Compound Trading Calculator -->
  <div class="calculator" id="compound">
    <h2>Compound Trading Calculator</h2>
    <div class="input-group">
      <label for="starting-balance">Starting Balance</label>
      <input type="number" id="starting-balance" placeholder="Enter starting balance (ex. 1000)">
    </div>
    <div class="input-group">
      <label for="compound-rate">Compound Rate (%)</label>
      <input type="number" id="compound-rate" placeholder="Enter compound rate (ex. 5)">
    </div>
    <div class="input-group">
      <label for="frequency">Compound Frequency</label>
      <select id="frequency">
        <option value="daily">Daily</option>
        <option value="weekly">Weekly</option>
        <option value="monthly">Monthly</option>
      </select>
    </div>
    <div class="input-group">
      <label for="end-term">End Term (Number of periods)</label>
      <input type="number" id="end-term" placeholder="Enter number of periods">
    </div>
    <button onclick="calculateCompound()">Calculate Compound</button>
    <div class="result" id="result-compound"></div>
    <div class="chart-container">
      <canvas id="compoundChart"></canvas>
    </div>
  </div>

  <!-- Debt Snowball Calculator -->
  <div class="calculator" id="snowball">
    <h2>Debt Snowball Calculator</h2>
    <div class="input-group">
      <label for="total-debt-snowball">Total Debt</label>
      <input type="number" id="total-debt-snowball" placeholder="Enter total debt">
    </div>
    <div class="input-group">
      <label for="monthly-payment-snowball">Monthly Payment</label>
      <input type="number" id="monthly-payment-snowball" placeholder="Enter monthly payment">
    </div>
    <button onclick="calculateSnowball()">Calculate Debt Snowball</button>
    <div class="result" id="result-snowball"></div>
    <div class="chart-container">
      <canvas id="snowballChart"></canvas>
    </div>
  </div>

  <!-- Debt Avalanche Calculator -->
  <div class="calculator" id="avalanche">
    <h2>Debt Avalanche Calculator</h2>
    <div class="input-group">
      <label for="total-debt-avalanche">Total Debt</label>
      <input type="number" id="total-debt-avalanche" placeholder="Enter total debt">
    </div>
    <div class="input-group">
      <label for="monthly-payment-avalanche">Monthly Payment</label>
      <input type="number" id="monthly-payment-avalanche" placeholder="Enter monthly payment">
    </div>
    <button onclick="calculateAvalanche()">Calculate Debt Avalanche</button>
    <div class="result" id="result-avalanche"></div>
    <div class="chart-container">
      <canvas id="avalancheChart"></canvas>
    </div>
  </div>
</div>

<script type="vbout-nosrpt" src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script type="vbout-nosrpt">
  // Function to switch calculators
  function showCalculator(calculatorId) {
    document.querySelectorAll('.calculator').forEach(calc => {
      calc.classList.remove('active');
    });
    document.getElementById(calculatorId).classList.add('active');
  }

  // Light/Dark Theme Toggle
  function toggleTheme() {
    document.body.classList.toggle('light-theme');
    const themeIcon = document.getElementById('theme-icon');
    themeIcon.textContent = document.body.classList.contains('light-theme') ? '☀️' : '🌙';
  }

  // Reset EV chart when new calculation is made
  let evCtx = document.getElementById("evChart").getContext("2d");
  let evChart = new Chart(evCtx, {
    type: "scatter",
    data: { datasets: [{ label: "EV", data: [], backgroundColor: "#007bff" }] },
    options: {
      scales: { x: { title: { display: true, text: "Probability (%)" } }, y: { title: { display: true, text: "EV" } } },
      plugins: { tooltip: { enabled: true, callbacks: { label: context => `EV: ${context.raw.y}` } } }
    }
  });

  function calculateEV() {
    const p1 = parseFloat(document.getElementById("probability1").value);
    const v1 = parseFloat(document.getElementById("value1").value);
    const v2 = parseFloat(document.getElementById("value2").value);
    if (isNaN(p1) || isNaN(v1) || isNaN(v2)) return;

    const ev = ((p1 / 100) * v1 - ((100 - p1) / 100) * v2).toFixed(2);
    document.getElementById("result-ev").style.display = "block";
    document.getElementById("result-ev").innerHTML = "Expected Value: " + ev;

    evChart.data.datasets[0].data = [{ x: p1, y: parseFloat(ev) }];  // Reset data
    evChart.update();
  }

  // Compound Trading Calculator Logic
  let compoundCtx = document.getElementById("compoundChart").getContext("2d");
  let compoundChart = new Chart(compoundCtx, {
    type: "line",
    data: { labels: [], datasets: [{ label: "Balance", data: [], backgroundColor: "#FFA500" }] },
    options: {
      scales: { x: { title: { display: true, text: "Time Period" } }, y: { title: { display: true, text: "Balance" } } },
      plugins: { tooltip: { enabled: true, callbacks: { label: context => `Balance: $${context.raw}` } } }
    }
  });

  function calculateCompound() {
    const balance = parseFloat(document.getElementById("starting-balance").value);
    const rate = parseFloat(document.getElementById("compound-rate").value) / 100;
    const frequency = document.getElementById("frequency").value;
    const endTerm = parseInt(document.getElementById("end-term").value);

    if (isNaN(balance) || isNaN(rate) || isNaN(endTerm)) return;
    
    let periods;
    if (frequency === "daily") periods = endTerm;
    else if (frequency === "weekly") periods = endTerm;
    else if (frequency === "monthly") periods = endTerm;

    const labels = [];
    const data = [];
    let compoundedBalance = balance;
    for (let i = 1; i <= periods; i++) {
      compoundedBalance += compoundedBalance * rate;
      labels.push(i);
      data.push(compoundedBalance.toFixed(2));
    }

    document.getElementById("result-compound").style.display = "block";
    document.getElementById("result-compound").innerHTML = "Final Balance: $" + compoundedBalance.toFixed(2);

    compoundChart.data.labels = labels;
    compoundChart.data.datasets[0].data = data;
    compoundChart.update();
  }

  // Debt Snowball Calculator Logic
  let snowballCtx = document.getElementById("snowballChart").getContext("2d");
  let snowballChart = new Chart(snowballCtx, {
    type: "bar",
    data: { labels: [], datasets: [{ label: "Debt Remaining", data: [], backgroundColor: "#00FF00" }] },
    options: {
      scales: { x: { title: { display: true, text: "Months" } }, y: { title: { display: true, text: "Debt" } } },
      plugins: { tooltip: { enabled: true, callbacks: { label: context => `Debt Remaining: $${context.raw}` } } }
    }
  });

  function calculateSnowball() {
    const totalDebt = parseFloat(document.getElementById("total-debt-snowball").value);
    const monthlyPayment = parseFloat(document.getElementById("monthly-payment-snowball").value);

    if (isNaN(totalDebt) || isNaN(monthlyPayment)) return;

    let remainingDebt = totalDebt;
    const labels = [];
    const data = [];

    let month = 1;
    while (remainingDebt > 0) {
      labels.push("Month " + month);
      data.push(remainingDebt.toFixed(2));
      remainingDebt -= monthlyPayment;
      month++;
    }

    document.getElementById("result-snowball").style.display = "block";
    document.getElementById("result-snowball").innerHTML = "Debt repaid in " + (month - 1) + " months.";

    snowballChart.data.labels = labels;
    snowballChart.data.datasets[0].data = data;
    snowballChart.update();
  }

  // Debt Avalanche Calculator Logic
  let avalancheCtx = document.getElementById("avalancheChart").getContext("2d");
  let avalancheChart = new Chart(avalancheCtx, {
    type: "line",
    data: { labels: [], datasets: [{ label: "Debt Remaining", data: [], backgroundColor: "#FF0000" }] },
    options: {
      scales: { x: { title: { display: true, text: "Months" } }, y: { title: { display: true, text: "Debt" } } },
      plugins: { tooltip: { enabled: true, callbacks: { label: context => `Debt Remaining: $${context.raw}` } } }
    }
  });

  function calculateAvalanche() {
    const totalDebt = parseFloat(document.getElementById("total-debt-avalanche").value);
    const monthlyPayment = parseFloat(document.getElementById("monthly-payment-avalanche").value);

    if (isNaN(totalDebt) || isNaN(monthlyPayment)) return;

    let remainingDebt = totalDebt;
    const labels = [];
    const data = [];

    let month = 1;
    while (remainingDebt > 0) {
      labels.push("Month " + month);
      data.push(remainingDebt.toFixed(2));
      remainingDebt -= monthlyPayment;
      month++;
    }

    document.getElementById("result-avalanche").style.display = "block";
    document.getElementById("result-avalanche").innerHTML = "Debt repaid in " + (month - 1) + " months.";

    avalancheChart.data.labels = labels;
    avalancheChart.data.datasets[0].data = data;
    avalancheChart.update();
  }
</script>



