Below is a minimal React prototype you can paste straight into your Replit project. It lets users:
	1.	Connect their Phantom wallet
	2.	View current SOL stake (delegated to your validator)
	3.	Stake additional SOL to your validator
	4.	Claim dual‚Äêreward THC airdrops
	5.	See if they hold the boost NFT (toggles the bonus UI)

‚∏ª

1. Project Structure

.
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ .env.local
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ index.js
    ‚îú‚îÄ‚îÄ App.js
    ‚îî‚îÄ‚îÄ components
        ‚îú‚îÄ‚îÄ StakeForm.js
        ‚îú‚îÄ‚îÄ ClaimRewards.js
        ‚îî‚îÄ‚îÄ NftBoostIndicator.js



‚∏ª

2. Dependencies

Add these to your package.json (or install via npm install):

{
  "name": "trade-hybrid-prototype",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@project-serum/anchor": "^0.27.0",
    "@solana/wallet-adapter-base": "^0.9.3",
    "@solana/wallet-adapter-react": "^0.15.13",
    "@solana/wallet-adapter-react-ui": "^0.16.3",
    "@solana/wallet-adapter-wallets": "^0.15.10",
    "@solana/web3.js": "^1.58.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}



‚∏ª

3. Environment

Create a .env.local with:

REACT_APP_CLUSTER=https://api.devnet.solana.com
REACT_APP_VALIDATOR_ID=5Mp3EF1donYwLxhe5hs6HoWpAucZGLZ76NKRNztkjEej
REACT_APP_DUAL_REWARDS_ID=DualRewProg1111111111111111111111111111111
REACT_APP_NFT_BOOST_ID=NftBoostProg111111111111111111111111111111111
REACT_APP_THC_MINT=4kXPBvQthvpes9TC7h6tXsYxWPUbYWpocBMVUG3eBLy4



‚∏ª

4. Core Files

src/index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import {
  ConnectionProvider,
  WalletProvider
} from '@solana/wallet-adapter-react';
import {
  getPhantomWallet
} from '@solana/wallet-adapter-wallets';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import '@solana/wallet-adapter-react-ui/styles.css';

const clusterUrl = process.env.REACT_APP_CLUSTER;
const wallets = [getPhantomWallet()];

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <ConnectionProvider endpoint={clusterUrl}>
    <WalletProvider wallets={wallets} autoConnect>
      <WalletModalProvider>
        <App />
      </WalletModalProvider>
    </WalletProvider>
  </ConnectionProvider>
);



‚∏ª

src/App.js

import React, { useEffect, useState } from 'react';
import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import * as anchor from '@project-serum/anchor';
import StakeForm from './components/StakeForm';
import ClaimRewards from './components/ClaimRewards';
import NftBoostIndicator from './components/NftBoostIndicator';

export default function App() {
  const { publicKey, signTransaction } = useWallet();
  const { connection } = useConnection();
  const [provider, setProvider] = useState(null);

  useEffect(() => {
    if (publicKey && signTransaction) {
      const wallet = {
        publicKey,
        signTransaction,
        signAllTransactions: null
      };
      setProvider(new anchor.AnchorProvider(connection, wallet, {}));
    }
  }, [publicKey, signTransaction, connection]);

  if (!provider) {
    return (
      <div style={{ padding: 20 }}>
        <h2>Trade Hybrid Prototype</h2>
        <p>Please connect your Phantom wallet.</p>
      </div>
    );
  }

  return (
    <div style={{ padding: 20 }}>
      <h2>üè¶ Trade Hybrid Staking</h2>
      <p>Connected: {publicKey.toBase58()}</p>
      <NftBoostIndicator provider={provider} />
      <StakeForm provider={provider} />
      <ClaimRewards provider={provider} />
    </div>
  );
}



‚∏ª

src/components/StakeForm.js

import React, { useState } from 'react';
import { LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';

export default function StakeForm({ provider }) {
  const [amount, setAmount] = useState('');

  const handleStake = async () => {
    const lamports = parseFloat(amount) * LAMPORTS_PER_SOL;
    const validatorPubkey = new PublicKey(process.env.REACT_APP_VALIDATOR_ID);

    const stakeAccount = anchor.web3.Keypair.generate();
    const tx = new Transaction().add(
      SystemProgram.createAccount({
        fromPubkey: provider.wallet.publicKey,
        newAccountPubkey: stakeAccount.publicKey,
        lamports,
        space: 200,
        programId: SystemProgram.programId
      }),
      // TODO: add delegateStake instruction
      SystemProgram.transfer({
        fromPubkey: provider.wallet.publicKey,
        toPubkey: validatorPubkey,
        lamports
      })
    );

    tx.feePayer = provider.wallet.publicKey;
    const { blockhash } = await provider.connection.getRecentBlockhash();
    tx.recentBlockhash = blockhash;

    tx.partialSign(stakeAccount);
    const signed = await provider.wallet.signTransaction(tx);
    const txid = await provider.connection.sendRawTransaction(signed.serialize());
    await provider.connection.confirmTransaction(txid);
    alert(`Staked ${amount} SOL ‚Äî txid: ${txid}`);
  };

  return (
    <div style={{ margin: '20px 0' }}>
      <h3>Stake SOL</h3>
      <input
        type="number" step="0.01"
        placeholder="Amount in SOL"
        value={amount}
        onChange={e => setAmount(e.target.value)}
      />
      <button onClick={handleStake} style={{ marginLeft: 10 }}>
        Stake
      </button>
    </div>
  );
}



‚∏ª

src/components/ClaimRewards.js

import React from 'react';
import * as anchor from '@project-serum/anchor';
import { PublicKey } from '@solana/web3.js';

export default function ClaimRewards({ provider }) {
  const claim = async () => {
    const programId = new PublicKey(process.env.REACT_APP_DUAL_REWARDS_ID);
    const program = new anchor.Program(
      require('../idl/dual_rewards.json'),
      programId,
      provider
    );

    await program.rpc.airdropRewards({
      accounts: {
        state: /* your state account pubkey */,
        user: provider.wallet.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId
      }
    });

    alert('THC rewards claimed!');
  };

  return (
    <div style={{ margin: '20px 0' }}>
      <h3>Claim Dual Rewards</h3>
      <button onClick={claim}>Claim THC</button>
    </div>
  );
}



‚∏ª

src/components/NftBoostIndicator.js

import React, { useEffect, useState } from 'react';
import { PublicKey } from '@solana/web3.js';
import * as anchor from '@project-serum/anchor';

export default function NftBoostIndicator({ provider }) {
  const [hasBoost, setHasBoost] = useState(false);

  useEffect(() => {
    (async () => {
      const boostProgramId = new PublicKey(process.env.REACT_APP_NFT_BOOST_ID);
      const program = new anchor.Program(
        require('../idl/nft_boost.json'),
        boostProgramId,
        provider
      );

      try {
        // Replace with your actual PDAs / account fetch logic
        await program.account.boostState.fetch(provider.wallet.publicKey);
        setHasBoost(true);
      } catch {
        setHasBoost(false);
      }
    })();
  }, [provider]);

  return (
    <div style={{ margin: '10px 0', color: hasBoost ? 'green' : 'gray' }}>
      {hasBoost
        ? 'üî• NFT Boost Active! +20% APR'
        : 'No NFT boost detected.'}
    </div>
  );
}



‚∏ª

5. Running the Prototype
	1.	Import your IDLs into src/idl/dual_rewards.json and src/idl/nft_boost.json (from the ZIP).
	2.	Install deps: npm install
	3.	Launch on Replit / npm start
	4.	Connect Phantom, then click through stake & claim flows!

‚∏ª

This gives you a clickable end-to-end demo in Replit. Feel free to riff on the UI, add styles, or wire in the staking‚Äêas-a-service pages next. Let me know how it goes or if you need the DAO voting prototype afterward!